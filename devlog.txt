BigBird
Jun Hong Wang
Ruiwen (Raven) Tang
Michael Kamela
pd 6
---------------------
Birdie's Mockeria

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow we so BOSS bc...
* We resolved our problem with empty stacks. We realized we'd been using an alias for an instance variable that we wanted to keep intact, when we should have been using a deep copy of that stack.
* We figured out how to move between scenes in Processing. We struggled a lot with waiting for mouse input, so we pivoted our idea to use keyboard input instead, which we had been able to successfully implement for the instructions page. We were using too many classes and loops, which was confusing us and overcomplicating things. We worked through the problem a lot faster than previous issues because we commented out lines and ran after nearly every change. This improved workflow was the more important takeway (as opposed to the technical success).

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
blah blah pesky bug...
maybe some of these will move into the Obs.Ovrcm section...
* We'd like to make the scoring algorithm a bit more advanced, taking into account things like evenness of the cuts. We were thinking of calculating cut evenness/symmetry by finding the midpoint of user clicks and finding distance from the center of the circle. However, we didn't end up having that much time to work on this aspect.
* In the future, we'd also like to make it possible to work on different pizzas at the same time and travel between stations more freely (for example, in the original Papa's Pizzeria, you're able to move away from a station while you're waiting for a pizza to bake and start the dough for a new pizza). 

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow! oo!...
* Processing actually converts all code into Java code first, which can then run.
* Our decision to make a boolean to make sure we couldn't run the keyPressed method more than once is useful for making sure that only one game could be run at a time.
* Understanding what an alias is and how it works was a big lesson, since we were stuck on it for far too long, but after we realized what was happening, we realized why so much emphasis gets placed on this. 
* We learned a lot about shapes in Processing, especially because we worked with making pizza graphics. We played around with ellipses, arcs, triangles, and rectangles, and their parameters. We were able to create random orientations of shapes by multiplying dimensions and angles by random ranges.
* We were able to create random distributions of topping shapes by adding a chance condition. For example, we'd only draw the pepperoni ellipse if Math.random() > some float value, like 0.6. In this case, there was a 40% chance of pepperoni showing up in the possible spot.
* We found math equations to be really helpful to consider. For example, when we were trying to determine the region that toppings could appear, we used nested for loops checking through x and y coordinates and also checked if they were within the pizza by using the equation of a circle, its center, and its radius.

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we changed ___ to ___ bc...
* iterator added
* realization of usage of linkedlist
* started with Processing, but thought it would be easier to get down the underlying aspects of the game before graphics so moved to Java
* NO MORE LOOPS, while loops are tricky in Processing because methods like keyPressed() and draw() are being constantly run. While loops are particularly tricky for user input (for example, waiting for the user to click in a certain area).
* Changed mouse input to key input to transition between scenes because we were more successful initially with key input and ran into less problems. There are also very specificly defined different keys, so each one can be assigned a different function or purpose, and we only need an if/else-if block within keyPressed() to redirect between all the keys. 


LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
* UML diagram before coding is very helpful!! (flesh out this point later)
* Queue is an interface and therefore abstract. If you want to use a Queue, you need to use one of its implementations (something that implements the Queue interface), or else you won't be able to construct it nor use enqueue/dequeue/etc methods
* Because Processing converts code into Java code, all code inside a .pde file will become code inside a class with the same name as the file. This means any class we declare inside .pde must not have the same name as the file. 
* There can only be one setup() in the whole project (can be clarified)
* setup() is only run once, so listening for keyboard/mouse inputs is not possible here. That can only be done inside draw(), which checks more than once.
* remember that if we set an object to another object, it's only an alias to it unless we copy it fully or the variable is a primitive
* posting to Piazza earlier can save us a lot of time, and can help us understand the problem better since we have to explain the issue to someone
* similar idea: use ducks
* It's more difficult to troubleshoot in Processing than Java, just because we have less experience with Processing and don't know as much of the basic framework everything relies on.
* Error messages in Processing are also a bit more vague and less helpful than the ones we receive from Java.
* It's a lot more valuable to try to do something on your own after viewing a strong model. We found Ruff Commandos' button framework to be extremely helpful. However, we first tried to directly copy their file into our project and use it. Even though we read through their code and clear comments and thought we understood everything, we didn't have the best comprehension that we could have had. We eventually deleted their file from our project and used the concepts behind their framework to implement our own buttons, and doing so allowed us to better troubleshoot and understand any problems. 
* Commenting out a tricky block of code and trying to reapproach it from a different angle, running every time a change is made, is perhaps the most efficient way to target a problem. Running immediately and frequently allows the issue to be pinpointed a lot faster. 
||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


2022-05-25
--------------------------------------------------------------
Jun Hong :: Configured work repo as directed, filled out readme with project desc and how-to-launch instructions
Raven :: Configured work repo as directed, filled out readme with project desc and how-to-launch instructions
==============================================================

2022-05-26
--------------------------------------------------------------
Jun Hong :: Created team flag, wrote up proprosal, outlined necessary classes and began forming UML diagrams for each planned class
Raven :: Created team flag, wrote up proprosal, outlined necessary classes and began forming UML diagrams for each planned class
==============================================================

2022-05-27
--------------------------------------------------------------
Jun Hong :: Updated gitignore with boss gitignore
==============================================================

2022-05-30
--------------------------------------------------------------
Jun Hong :: Wrote up UML diagram for all classes and described relationships btw classes
Raven :: Wrote up UML diagram for all classes and described relationships btw classes
==============================================================

2022-05-31
--------------------------------------------------------------
Jun Hong :: Created v1, set up all classes with methods & variables based on UML diagram, created flowchart of state transitions, started code implementation for Woo, Station, Topping, Pizza
Raven :: Created v1, set up all classes with methods & variables based on UML diagram, created flowchart of state transitions, started code implementation for Woo, Station, Topping, Pizza, updated README.md following friedChicken's example
Michael :: Created v1, set up all classes with methods & variables based on UML diagram, started code implementation for Woo, Station, Topping, Pizza
==============================================================

2022-06-01
--------------------------------------------------------------
Jun Hong :: Brought Pizza class to compilation success, implemented and tested genPizza() in Woo, implemented accessor methods, instance variables, and overloaded constructors for all classes that implement the Station interface (Cashier, Cut, dough, Oven, Serve, ToppingS), added LLQueue class, worked on default constructor for Woo
Raven :: Brought Pizza class to compilation success, implemented and tested genPizza() in Woo, implemented accessor methods, instance variables, and overloaded constructors for all classes that implement the Station interface (Cashier, Cut, dough, Oven, Serve, ToppingS), added LLQueue class, worked on default constructor for Woo
Michael :: Brought Pizza class to compilation success, implemented and tested genPizza() in Woo
==============================================================

2022-06-02
--------------------------------------------------------------
Jun Hong :: Began working in Processing again, beginning with graphics, made Woo a driver file, with only setup() and draw(), moved actual code to Game, Updated UML diagrams with new methods and instance variables, Updated Woo constructor with beginning of gameplay and created LL of stations, Began work on v2, now with use of Iterator
Raven :: Updated UML diagrams with new methods and instance variables, Updated Woo constructor with beginning of gameplay and created LL of stations, Began work on v2, now with use of Iterator
Michael :: Updated UML diagrams with new methods and instance variables
==============================================================

2022-06-03
--------------------------------------------------------------
Jun Hong :: Made instructions class, started putting background color and text into processing, Attempted to fix game play method
Raven :: Made instructions class, started putting background color and text into processing, Attempted to fix game play method
Michael :: Made instructions class, started putting background color and text into processing, Attempted to fix game play method
==============================================================

2022-06-05
--------------------------------------------------------------
Jun Hong :: Made presentable instructions page, Made key input to change from instruction to first scene of game, implemented loadScene method of Cashier, Encountered problem with displaying toppings in toString method of Pizza, Attempted to troubleshoot problem
Raven :: Made presentable instructions page, Made key input to change from instruction to first scene of game, implemented loadScene method of Cashier, Encountered problem with displaying toppings in toString method of Pizza, Attempted to troubleshoot problem
Michael :: Made presentable instructions page, Made key input to change from instruction to first scene of game, implemented loadScene method of Cashier, Encountered problem with displaying toppings in toString method of Pizza, Attempted to troubleshoot problem
==============================================================

2022-06-06
--------------------------------------------------------------
Jun Hong :: Attempted to fix showOrder problem, reworked toString method and constructor for Pizza, processing text, Fixed showOrder problem, realized it was a problem with how Java handled aliases for objects, cleaned up Pizza toString method
Raven :: Attempted to fix showOrder problem, reworked toString method and constructor for Pizza, processing text, Fixed showOrder problem, realized it was a problem with how Java handled aliases for objects, cleaned up Pizza toString method
Michael :: Attempted to fix showOrder problem, reworked toString method and constructor for Pizza, processing text
==============================================================

2022-06-07
--------------------------------------------------------------
All :: Attempted to implement progression between stations, added Button class, used in all stations (but Cashier only for now)
All :: FINALLY fixed progression between stations, all stations now sequentially appear and transition based on keyboard input, implemented loadScene() and showOrder() for all classes that implement the Station interface, removed clutter and unnecessary clasess
==============================================================

2022-06-08
--------------------------------------------------------------
All :: Attempted to implement Dough class, decided to use key inputs instead of mouse input because we were more familiar with it
Jun Hong :: Continued to implement Dough class, got kneading to work as a value.
Jun Hong :: Encountered bug where station progression would get stuck if too many (or a specific input?) were inputted at the beginning
==============================================================

2022-06-09
--------------------------------------------------------------
Jun Hong :: Added user input for Topping and Oven Stations
Jun Hong :: Added comments for how to simplify code and improve workflow (to make it in time for demotime)
All :: Implemented user input for Cut Station, added scores
Jun Hong :: Added to scores method, added EndPage class that will be displayed at the end of the game.
All :: Finished scores method, got graphics to work for drawing pizza, tested scores and graphics, gameplay of whole game, practiced demo
All :: Completed game, but may still add features
Raven :: Added confetti to end page, byline to instructions & end page, and hard mode (order doesn't show up after cashier).
Raven :: Updated UML diagrams and flowcharts.
Raven :: Updated Zone of Reflection in devlog
==============================================================
